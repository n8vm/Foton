#pragma once

#include <iostream>
#include <glm/glm.hpp>
#include <tiny_obj_loader.h>
#include <map>

#include "Pluto/Tools/Options.hxx"
#include "Pluto/Libraries/Vulkan/Vulkan.hxx"
#include "Pluto/Tools/StaticFactory.hxx"

#define MAX_MESHES 1024

/* A mesh contains vertex information that has been loaded to the GPU. */
class Mesh : public StaticFactory
{
  private:
    static Mesh meshes[MAX_MESHES];
    static std::map<std::string, uint32_t> lookupTable;

    glm::vec3 centroid;

    std::vector<glm::vec3> points;
    std::vector<glm::vec3> normals;
    std::vector<glm::vec4> colors;
    std::vector<glm::vec2> texcoords;
    std::vector<uint32_t> indices;

    tinyobj::attrib_t attrib;

    vk::Buffer pointBuffer;
    vk::DeviceMemory pointBufferMemory;

    vk::Buffer colorBuffer;
    vk::DeviceMemory colorBufferMemory;

    vk::Buffer indexBuffer;
    vk::DeviceMemory indexBufferMemory;

    vk::Buffer normalBuffer;
    vk::DeviceMemory normalBufferMemory;

    vk::Buffer texCoordBuffer;
    vk::DeviceMemory texCoordBufferMemory;

  public:
    static Mesh* Get(std::string name);
	static Mesh* Get(uint32_t id);
    static Mesh* CreateCube(std::string name);
    static Mesh* CreatePlane(std::string name);
    static Mesh* CreateSphere(std::string name);
    static Mesh* CreateFromOBJ(std::string name, std::string objPath);
    static Mesh* CreateFromSTL(std::string name, std::string stlPath);
    static Mesh* CreateFromGLB(std::string name, std::string glbPath);
    //static Mesh* Create(std::string name);
	static Mesh* GetFront();
	static uint32_t GetCount();
	static bool Delete(std::string name);
	static bool Delete(uint32_t id);

    class Vertex
    {
      public:
        glm::vec3 point = glm::vec3(0.0);
        glm::vec4 color = glm::vec4(1, 0, 1, 1);
        glm::vec3 normal = glm::vec3(0.0);
        glm::vec2 texcoord = glm::vec2(0.0);

        bool operator==(const Vertex &other) const
        {
            bool result =
                (point == other.point && color == other.color && normal == other.normal && texcoord == other.texcoord);
            return result;
        }
    };

    Mesh() {
		this->initialized = false;
	}

    Mesh(std::string name, uint32_t id)
    {
        this->initialized = true;
		this->name = name;
		this->id = id;
    }

    std::string to_string() {
        std::string output;
        output += "{\n";
        output += "\ttype: \"Mesh\",\n";
        output += "\tname: \"" + name + "\",\n";
        output += "\tnum_points: \"" + std::to_string(points.size()) + "\",\n";
        output += "\tnum_indices: \"" + std::to_string(indices.size()) + "\",\n";
        output += "}";
        return output;
    }
	
    static void Initialize();
    //static void UploadSSBO();
    //static vk::Buffer GetSSBO();
	//static uint32_t GetSSBOSize();
    //static void CleanUp();	

    std::vector<glm::vec3> get_points() {
        return points;
    }

    std::vector<glm::vec4> get_colors() {
        return colors;
    }

    std::vector<glm::vec3> get_normals() {
        return normals;
    }

    std::vector<glm::vec2> get_texcoords() {
        return texcoords;
    }

    std::vector<uint32_t> get_indices() {
        return indices;
    }

    vk::Buffer get_point_buffer()
    {
        return pointBuffer;
    }

    vk::Buffer get_color_buffer()
    {
        return colorBuffer;
    }

    vk::Buffer get_index_buffer()
    {
        return indexBuffer;
    }

    vk::Buffer get_normal_buffer()
    {
        return normalBuffer;
    }

    vk::Buffer get_texcoord_buffer()
    {
        return texCoordBuffer;
    }

    uint32_t get_total_indices()
    {
        return (uint32_t)indices.size();
    }

    uint32_t get_index_bytes()
    {
        return sizeof(uint32_t);
    }

    void compute_centroid()
    {
        glm::vec3 s(0.0);
        for (int i = 0; i < points.size(); i += 1)
        {
            s += points[i];
        }
        s /= points.size();
        centroid = s;
    }

    glm::vec3 get_centroid()
    {
        return centroid;
    }

    void cleanup()
    {
        auto vulkan = Libraries::Vulkan::Get();
        auto device = vulkan->get_device();

        /* Destroy index buffer */
        device.destroyBuffer(indexBuffer);
        device.freeMemory(indexBufferMemory);

        /* Destroy vertex buffer */
        device.destroyBuffer(pointBuffer);
        device.freeMemory(pointBufferMemory);

        /* Destroy vertex color buffer */
        device.destroyBuffer(colorBuffer);
        device.freeMemory(colorBufferMemory);

        /* Destroy normal buffer */
        device.destroyBuffer(normalBuffer);
        device.freeMemory(normalBufferMemory);

        /* Destroy uv buffer */
        device.destroyBuffer(texCoordBuffer);
        device.freeMemory(texCoordBufferMemory);
    }

    bool make_cube()
    {
        points.assign({
            {1.0, -1.0, -1.0},  {1.0, -1.0, -1.0},  {1.0, -1.0, -1.0}, 
            {1.0, -1.0, 1.0},   {1.0, -1.0, 1.0},   {1.0, -1.0, 1.0},
            {-1.0, -1.0, 1.0},  {-1.0, -1.0, 1.0},  {-1.0, -1.0, 1.0}, 
            {-1.0, -1.0, -1.0}, {-1.0, -1.0, -1.0}, {-1.0, -1.0, -1.0},
            {1.0, 1.0, -1.0},   {1.0, 1.0, -1.0},   {1.0, 1.0, -1.0}, 
            {1.0, 1.0, 1.0},    {1.0, 1.0, 1.0},    {1.0, 1.0, 1.0},
            {-1.0, 1.0, 1.0},   {-1.0, 1.0, 1.0},   {-1.0, 1.0, 1.0}, 
            {-1.0, 1.0, -1.0},  {-1.0, 1.0, -1.0},  {-1.0, 1.0, -1.0}});

        colors.assign({
            {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0},
            {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0},
            {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0},
            {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0},
            {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0},
            {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0},
            {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0},
            {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0},
            {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}});

        normals.assign({
            {1.0, -1.0, -1.0},  {1.0, -1.0, -1.0},  {1.0, -1.0, -1.0}, 
            {1.0, -1.0, 1.0},   {1.0, -1.0, 1.0},   {1.0, -1.0, 1.0},
            {-1.0, -1.0, 1.0},  {-1.0, -1.0, 1.0},  {-1.0, -1.0, 1.0}, 
            {-1.0, -1.0, -1.0}, {-1.0, -1.0, -1.0}, {-1.0, -1.0, -1.0},
            {1.0, 1.0, -1.0},   {1.0, 1.0, -1.0},   {1.0, 1.0, -1.0}, 
            {1.0, 1.0, 1.0},    {1.0, 1.0, 1.0},    {1.0, 1.0, 1.0},
            {-1.0, 1.0, 1.0},   {-1.0, 1.0, 1.0},   {-1.0, 1.0, 1.0}, 
            {-1.0, 1.0, -1.0},  {-1.0, 1.0, -1.0},  {-1.0, 1.0, -1.0}});

        texcoords.assign({
            {0.000199999995f,0.999800026f},    {0.000199999995f,0.666467011f}, {0.666467011f,0.333133996f},
            {0.333133996f,0.999800026f},       {0.333133996f,0.666467011f},    {0.333532989f,0.666467011f},
            {0.333133996f,0.666867018f},       {0.666467011f,0.666467011f},    {0.999800026f,0.000199999995f},
            {0.000199999995f,0.666867018f},    {0.999800026f,0.333133996f},    {0.666467011f,0.000199999995f},
            {0.000199999995f,0.333133996f},    {0.000199999995f,0.333532989f}, {0.333532989f,0.333133996f},
            {0.333133996f,0.333133996f},       {0.333133996f,0.333532989f},    {0.333532989f,0.333532989f},
            {0.333133996f,0.000199999995f},    {0.666467011f,0.333532989f},    {0.666866004f,0.000199999995f},
            {0.000199999995f,0.000199999995f}, {0.666866004f,0.333133012f},    {0.333532989f,0.000199999995f}
        });

        indices.assign({0,3,6,0,6,9,12,21,18,12,18,15,1,13,16,1,16,4,5,17,19,5,19,7,8,20,22,8,22,10,14,2,11,14,11,23,});
        compute_centroid();
        createPointBuffer();
        createColorBuffer();
        createNormalBuffer();
        createTexCoordBuffer();
        createIndexBuffer();
        return true;
    }

    bool make_plane()
    {
        points.assign({
            {-1.f, -1.f, 0.f},
            {1.f, -1.f, 0.f},
            {-1.f, 1.f, 0.f},
            {1.f, 1.f, 0.f}});

        colors.assign({
            {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}, {1.0,1.0,1.0,1.0}
        });

        normals.assign({
            {0.f, 0.f, 1.f},
            {0.f, 0.f, 1.f},
            {0.f, 0.f, 1.f},
            {0.f, 0.f, 1.f}
        });

        texcoords.assign({
            {0.f, 1.f},
            {1.f, 1.f},
            {0.f, 0.f},
            {1.f, 0.f}
        });

        indices.assign({0,1,3,0,3,2});

        compute_centroid();
        createPointBuffer();
        createColorBuffer();
        createNormalBuffer();
        createTexCoordBuffer();
        createIndexBuffer();
        return true;
    }

    bool make_sphere()
    {
        points.assign({
            { 0.0 ,  0.0 ,  -1.0 }, { 0.72 ,  -0.53 ,  -0.45 }, { 0.72 ,  -0.53 ,  -0.45 }, 
            { -0.28 ,  -0.85 ,  -0.45 }, { -0.89 ,  0.0 ,  -0.45 }, { -0.28 ,  0.85 ,  -0.45 }, 
            { 0.72 ,  0.53 ,  -0.45 }, { 0.72 ,  0.53 ,  -0.45 }, { 0.28 ,  -0.85 ,  0.45 }, 
            { -0.72 ,  -0.53 ,  0.45 }, { -0.72 ,  -0.53 ,  0.45 }, { -0.72 ,  0.53 ,  0.45 }, 
            { -0.72 ,  0.53 ,  0.45 }, { 0.28 ,  0.85 ,  0.45 }, { 0.89 ,  0.0 ,  0.45 }, 
            { 0.0 ,  0.0 ,  1.0 }, { -0.23 ,  -0.72 ,  -0.66 }, { -0.23 ,  -0.72 ,  -0.66 }, 
            { -0.16 ,  -0.5 ,  -0.85 }, { -0.08 ,  -0.24 ,  -0.97 }, { 0.2 ,  -0.15 ,  -0.97 }, 
            { 0.43 ,  -0.31 ,  -0.85 }, { 0.61 ,  -0.44 ,  -0.66 }, { 0.61 ,  -0.44 ,  -0.66 }, 
            { 0.53 ,  -0.68 ,  -0.5 }, { 0.53 ,  -0.68 ,  -0.5 }, { 0.53 ,  -0.68 ,  -0.5 }, 
            { 0.26 ,  -0.81 ,  -0.53 }, { -0.03 ,  -0.86 ,  -0.5 }, { 0.81 ,  0.3 ,  -0.5 }, 
            { 0.85 ,  0.0 ,  -0.53 }, { 0.81 ,  -0.3 ,  -0.5 }, { 0.2 ,  0.15 ,  -0.97 }, 
            { 0.43 ,  0.31 ,  -0.85 }, { 0.61 ,  0.44 ,  -0.66 }, { 0.61 ,  0.44 ,  -0.66 }, 
            { -0.75 ,  0.0 ,  -0.66 }, { -0.75 ,  0.0 ,  -0.66 }, { -0.53 ,  0.0 ,  -0.85 }, 
            { -0.25 ,  0.0 ,  -0.97 }, { -0.48 ,  -0.72 ,  -0.5 }, { -0.48 ,  -0.72 ,  -0.5 }, 
            { -0.69 ,  -0.5 ,  -0.53 }, { -0.69 ,  -0.5 ,  -0.53 }, { -0.69 ,  -0.5 ,  -0.53 }, 
            { -0.83 ,  -0.24 ,  -0.5 }, { -0.23 ,  0.72 ,  -0.66 }, { -0.23 ,  0.72 ,  -0.66 }, 
            { -0.16 ,  0.5 ,  -0.85 }, { -0.08 ,  0.24 ,  -0.97 }, { -0.83 ,  0.24 ,  -0.5 }, 
            { -0.69 ,  0.5 ,  -0.53 }, { -0.69 ,  0.5 ,  -0.53 }, { -0.69 ,  0.5 ,  -0.53 }, 
            { -0.48 ,  0.72 ,  -0.5 }, { -0.48 ,  0.72 ,  -0.5 }, { -0.03 ,  0.86 ,  -0.5 }, 
            { 0.26 ,  0.81 ,  -0.53 }, { 0.53 ,  0.68 ,  -0.5 }, { 0.53 ,  0.68 ,  -0.5 }, 
            { 0.53 ,  0.68 ,  -0.5 }, { 0.96 ,  -0.15 ,  0.25 }, { 0.95 ,  -0.31 ,  0.0 }, 
            { 0.86 ,  -0.44 ,  -0.25 }, { 0.86 ,  0.44 ,  -0.25 }, { 0.95 ,  0.31 ,  0.0 }, 
            { 0.96 ,  0.15 ,  0.25 }, { 0.16 ,  -0.96 ,  0.25 }, { 0.0 ,  -1.0 ,  0.0 }, 
            { -0.16 ,  -0.96 ,  -0.25 }, { 0.69 ,  -0.68 ,  -0.25 }, { 0.69 ,  -0.68 ,  -0.25 }, 
            { 0.59 ,  -0.81 ,  0.0 }, { 0.59 ,  -0.81 ,  0.0 }, { 0.44 ,  -0.86 ,  0.25 }, 
            { -0.86 ,  -0.44 ,  0.25 }, { -0.95 ,  -0.31 ,  0.0 }, { -0.96 ,  -0.15 ,  -0.25 }, 
            { -0.44 ,  -0.86 ,  -0.25 }, { -0.59 ,  -0.81 ,  0.0 }, { -0.59 ,  -0.81 ,  0.0 }, 
            { -0.69 ,  -0.68 ,  0.25 }, { -0.69 ,  -0.68 ,  0.25 }, { -0.69 ,  0.68 ,  0.25 }, 
            { -0.69 ,  0.68 ,  0.25 }, { -0.59 ,  0.81 ,  0.0 }, { -0.59 ,  0.81 ,  0.0 }, 
            { -0.44 ,  0.86 ,  -0.25 }, { -0.96 ,  0.15 ,  -0.25 }, { -0.95 ,  0.31 ,  0.0 }, 
            { -0.86 ,  0.44 ,  0.25 }, { 0.44 ,  0.86 ,  0.25 }, { 0.59 ,  0.81 ,  0.0 }, 
            { 0.59 ,  0.81 ,  0.0 }, { 0.69 ,  0.68 ,  -0.25 }, { 0.69 ,  0.68 ,  -0.25 }, 
            { -0.16 ,  0.96 ,  -0.25 }, { 0.0 ,  1.0 ,  0.0 }, { 0.16 ,  0.96 ,  0.25 }, 
            { 0.83 ,  -0.24 ,  0.5 }, { 0.69 ,  -0.5 ,  0.53 }, { 0.69 ,  -0.5 ,  0.53 }, 
            { 0.69 ,  -0.5 ,  0.53 }, { 0.48 ,  -0.72 ,  0.5 }, { 0.48 ,  -0.72 ,  0.5 }, 
            { 0.03 ,  -0.86 ,  0.5 }, { -0.26 ,  -0.81 ,  0.53 }, { -0.53 ,  -0.68 ,  0.5 }, 
            { -0.53 ,  -0.68 ,  0.5 }, { -0.53 ,  -0.68 ,  0.5 }, { -0.81 ,  -0.3 ,  0.5 }, 
            { -0.85 ,  0.0 ,  0.53 }, { -0.81 ,  0.3 ,  0.5 }, { -0.53 ,  0.68 ,  0.5 }, 
            { -0.53 ,  0.68 ,  0.5 }, { -0.53 ,  0.68 ,  0.5 }, { -0.26 ,  0.81 ,  0.53 }, 
            { 0.03 ,  0.86 ,  0.5 }, { 0.48 ,  0.72 ,  0.5 }, { 0.48 ,  0.72 ,  0.5 }, 
            { 0.69 ,  0.5 ,  0.53 }, { 0.69 ,  0.5 ,  0.53 }, { 0.69 ,  0.5 ,  0.53 }, 
            { 0.83 ,  0.24 ,  0.5 }, { 0.08 ,  -0.24 ,  0.97 }, { 0.16 ,  -0.5 ,  0.85 }, 
            { 0.23 ,  -0.72 ,  0.66 }, { 0.23 ,  -0.72 ,  0.66 }, { 0.75 ,  0.0 ,  0.66 }, 
            { 0.75 ,  0.0 ,  0.66 }, { 0.53 ,  0.0 ,  0.85 }, { 0.25 ,  0.0 ,  0.97 }, 
            { -0.2 ,  -0.15 ,  0.97 }, { -0.43 ,  -0.31 ,  0.85 }, { -0.61 ,  -0.44 ,  0.66 }, 
            { -0.61 ,  -0.44 ,  0.66 }, { -0.2 ,  0.15 ,  0.97 }, { -0.43 ,  0.31 ,  0.85 }, 
            { -0.61 ,  0.44 ,  0.66 }, { -0.61 ,  0.44 ,  0.66 }, { 0.08 ,  0.24 ,  0.97 }, 
            { 0.16 ,  0.5 ,  0.85 }, { 0.23 ,  0.72 ,  0.66 }, { 0.23 ,  0.72 ,  0.66 }, 
            { 0.36 ,  0.26 ,  0.89 }, { 0.64 ,  0.26 ,  0.72 }, { 0.64 ,  0.26 ,  0.72 }, 
            { 0.45 ,  0.53 ,  0.72 }, { 0.45 ,  0.53 ,  0.72 }, { -0.14 ,  0.43 ,  0.89 }, 
            { -0.05 ,  0.69 ,  0.72 }, { -0.05 ,  0.69 ,  0.72 }, { -0.36 ,  0.59 ,  0.72 }, 
            { -0.36 ,  0.59 ,  0.72 }, { -0.45 ,  0.0 ,  0.89 }, { -0.67 ,  0.16 ,  0.72 }, 
            { -0.67 ,  0.16 ,  0.72 }, { -0.67 ,  -0.16 ,  0.72 }, { -0.67 ,  -0.16 ,  0.72 }, 
            { -0.14 ,  -0.43 ,  0.89 }, { -0.36 ,  -0.59 ,  0.72 }, { -0.36 ,  -0.59 ,  0.72 }, 
            { -0.05 ,  -0.69 ,  0.72 }, { -0.05 ,  -0.69 ,  0.72 }, { 0.36 ,  -0.26 ,  0.89 }, 
            { 0.45 ,  -0.53 ,  0.72 }, { 0.45 ,  -0.53 ,  0.72 }, { 0.64 ,  -0.26 ,  0.72 }, 
            { 0.64 ,  -0.26 ,  0.72 }, { 0.86 ,  0.43 ,  0.28 }, { 0.81 ,  0.59 ,  0.0 }, 
            { 0.67 ,  0.69 ,  0.28 }, { 0.67 ,  0.69 ,  0.28 }, { -0.14 ,  0.95 ,  0.28 }, 
            { -0.31 ,  0.95 ,  0.0 }, { -0.45 ,  0.85 ,  0.28 }, { -0.95 ,  0.16 ,  0.28 }, 
            { -1.0 ,  0.0 ,  0.0 }, { -0.95 ,  -0.16 ,  0.28 }, { -0.45 ,  -0.85 ,  0.28 }, 
            { -0.31 ,  -0.95 ,  -0.0 }, { -0.14 ,  -0.95 ,  0.28 }, { 0.67 ,  -0.69 ,  0.28 }, 
            { 0.67 ,  -0.69 ,  0.28 }, { 0.81 ,  -0.59 ,  -0.0 }, { 0.86 ,  -0.43 ,  0.28 }, 
            { 0.31 ,  0.95 ,  0.0 }, { 0.45 ,  0.85 ,  -0.28 }, { 0.14 ,  0.95 ,  -0.28 }, 
            { -0.81 ,  0.59 ,  0.0 }, { -0.67 ,  0.69 ,  -0.28 }, { -0.67 ,  0.69 ,  -0.28 }, 
            { -0.86 ,  0.43 ,  -0.28 }, { -0.81 ,  -0.59 ,  0.0 }, { -0.86 ,  -0.43 ,  -0.28 }, 
            { -0.67 ,  -0.69 ,  -0.28 }, { -0.67 ,  -0.69 ,  -0.28 }, { 0.31 ,  -0.95 ,  0.0 }, 
            { 0.14 ,  -0.95 ,  -0.28 }, { 0.45 ,  -0.85 ,  -0.28 }, { 1.0 ,  0.0 ,  0.0 }, 
            { 0.95 ,  -0.16 ,  -0.28 }, { 0.95 ,  0.16 ,  -0.28 }, { 0.36 ,  0.59 ,  -0.72 }, 
            { 0.36 ,  0.59 ,  -0.72 }, { 0.14 ,  0.43 ,  -0.89 }, { 0.05 ,  0.69 ,  -0.72 }, 
            { 0.05 ,  0.69 ,  -0.72 }, { -0.45 ,  0.53 ,  -0.72 }, { -0.45 ,  0.53 ,  -0.72 }, 
            { -0.36 ,  0.26 ,  -0.89 }, { -0.64 ,  0.26 ,  -0.72 }, { -0.64 ,  0.26 ,  -0.72 }, 
            { -0.64 ,  -0.26 ,  -0.72 }, { -0.64 ,  -0.26 ,  -0.72 }, { -0.36 ,  -0.26 ,  -0.89 }, 
            { -0.45 ,  -0.53 ,  -0.72 }, { -0.45 ,  -0.53 ,  -0.72 }, { 0.67 ,  0.16 ,  -0.72 }, 
            { 0.67 ,  0.16 ,  -0.72 }, { 0.67 ,  -0.16 ,  -0.72 }, { 0.67 ,  -0.16 ,  -0.72 }, 
            { 0.45 ,  -0.0 ,  -0.89 }, { 0.05 ,  -0.69 ,  -0.72 }, { 0.05 ,  -0.69 ,  -0.72 }, 
            { 0.14 ,  -0.43 ,  -0.89 }, { 0.36 ,  -0.59 ,  -0.72 }, { 0.36 ,  -0.59 ,  -0.72 }, 
        });

        colors.assign({
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
            { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, { 1.0 ,  1.0 ,  1.0 ,  1.0 }, 
        });

        normals.assign({
            { 0.0 ,  0.0 ,  -1.0 }, { 0.72 ,  -0.53 ,  -0.45 }, { 0.72 ,  -0.53 ,  -0.45 }, 
            { -0.28 ,  -0.85 ,  -0.45 }, { -0.89 ,  0.0 ,  -0.45 }, { -0.28 ,  0.85 ,  -0.45 }, 
            { 0.72 ,  0.53 ,  -0.45 }, { 0.72 ,  0.53 ,  -0.45 }, { 0.28 ,  -0.85 ,  0.45 }, 
            { -0.72 ,  -0.53 ,  0.45 }, { -0.72 ,  -0.53 ,  0.45 }, { -0.72 ,  0.53 ,  0.45 }, 
            { -0.72 ,  0.53 ,  0.45 }, { 0.28 ,  0.85 ,  0.45 }, { 0.89 ,  0.0 ,  0.45 }, 
            { 0.0 ,  0.0 ,  1.0 }, { -0.23 ,  -0.71 ,  -0.67 }, { -0.23 ,  -0.71 ,  -0.67 }, 
            { -0.16 ,  -0.5 ,  -0.85 }, { -0.08 ,  -0.25 ,  -0.97 }, { 0.21 ,  -0.15 ,  -0.97 }, 
            { 0.43 ,  -0.31 ,  -0.85 }, { 0.6 ,  -0.44 ,  -0.67 }, { 0.6 ,  -0.44 ,  -0.67 }, 
            { 0.52 ,  -0.69 ,  -0.5 }, { 0.52 ,  -0.69 ,  -0.5 }, { 0.52 ,  -0.69 ,  -0.5 }, 
            { 0.26 ,  -0.81 ,  -0.53 }, { -0.02 ,  -0.86 ,  -0.5 }, { 0.82 ,  0.29 ,  -0.5 }, 
            { 0.85 ,  0.0 ,  -0.53 }, { 0.82 ,  -0.29 ,  -0.5 }, { 0.21 ,  0.15 ,  -0.97 }, 
            { 0.43 ,  0.31 ,  -0.85 }, { 0.6 ,  0.44 ,  -0.67 }, { 0.6 ,  0.44 ,  -0.67 }, 
            { -0.75 ,  0.0 ,  -0.67 }, { -0.75 ,  0.0 ,  -0.67 }, { -0.53 ,  0.0 ,  -0.85 }, 
            { -0.26 ,  0.0 ,  -0.97 }, { -0.49 ,  -0.71 ,  -0.5 }, { -0.49 ,  -0.71 ,  -0.5 }, 
            { -0.69 ,  -0.5 ,  -0.53 }, { -0.69 ,  -0.5 ,  -0.53 }, { -0.69 ,  -0.5 ,  -0.53 }, 
            { -0.83 ,  -0.25 ,  -0.5 }, { -0.23 ,  0.71 ,  -0.67 }, { -0.23 ,  0.71 ,  -0.67 }, 
            { -0.16 ,  0.5 ,  -0.85 }, { -0.08 ,  0.25 ,  -0.97 }, { -0.83 ,  0.25 ,  -0.5 }, 
            { -0.69 ,  0.5 ,  -0.53 }, { -0.69 ,  0.5 ,  -0.53 }, { -0.69 ,  0.5 ,  -0.53 }, 
            { -0.49 ,  0.71 ,  -0.5 }, { -0.49 ,  0.71 ,  -0.5 }, { -0.02 ,  0.86 ,  -0.5 }, 
            { 0.26 ,  0.81 ,  -0.53 }, { 0.52 ,  0.69 ,  -0.5 }, { 0.52 ,  0.69 ,  -0.5 }, 
            { 0.52 ,  0.69 ,  -0.5 }, { 0.96 ,  -0.15 ,  0.24 }, { 0.95 ,  -0.31 ,  0.0 }, 
            { 0.87 ,  -0.44 ,  -0.24 }, { 0.87 ,  0.44 ,  -0.24 }, { 0.95 ,  0.31 ,  0.0 }, 
            { 0.96 ,  0.15 ,  0.24 }, { 0.15 ,  -0.96 ,  0.24 }, { 0.0 ,  -1.0 ,  0.0 }, 
            { -0.15 ,  -0.96 ,  -0.24 }, { 0.68 ,  -0.69 ,  -0.24 }, { 0.68 ,  -0.69 ,  -0.24 }, 
            { 0.59 ,  -0.81 ,  0.0 }, { 0.59 ,  -0.81 ,  0.0 }, { 0.44 ,  -0.86 ,  0.24 }, 
            { -0.87 ,  -0.44 ,  0.24 }, { -0.95 ,  -0.31 ,  0.0 }, { -0.96 ,  -0.15 ,  -0.24 }, 
            { -0.44 ,  -0.86 ,  -0.24 }, { -0.59 ,  -0.81 ,  0.0 }, { -0.59 ,  -0.81 ,  0.0 }, 
            { -0.68 ,  -0.69 ,  0.24 }, { -0.68 ,  -0.69 ,  0.24 }, { -0.68 ,  0.69 ,  0.24 }, 
            { -0.68 ,  0.69 ,  0.24 }, { -0.59 ,  0.81 ,  0.0 }, { -0.59 ,  0.81 ,  0.0 }, 
            { -0.44 ,  0.86 ,  -0.24 }, { -0.96 ,  0.15 ,  -0.24 }, { -0.95 ,  0.31 ,  0.0 }, 
            { -0.87 ,  0.44 ,  0.24 }, { 0.44 ,  0.86 ,  0.24 }, { 0.59 ,  0.81 ,  0.0 }, 
            { 0.59 ,  0.81 ,  0.0 }, { 0.68 ,  0.69 ,  -0.24 }, { 0.68 ,  0.69 ,  -0.24 }, 
            { -0.15 ,  0.96 ,  -0.24 }, { 0.0 ,  1.0 ,  0.0 }, { 0.15 ,  0.96 ,  0.24 }, 
            { 0.83 ,  -0.25 ,  0.5 }, { 0.69 ,  -0.5 ,  0.53 }, { 0.69 ,  -0.5 ,  0.53 }, 
            { 0.69 ,  -0.5 ,  0.53 }, { 0.49 ,  -0.71 ,  0.5 }, { 0.49 ,  -0.71 ,  0.5 }, 
            { 0.02 ,  -0.86 ,  0.5 }, { -0.26 ,  -0.81 ,  0.53 }, { -0.52 ,  -0.69 ,  0.5 }, 
            { -0.52 ,  -0.69 ,  0.5 }, { -0.52 ,  -0.69 ,  0.5 }, { -0.82 ,  -0.29 ,  0.5 }, 
            { -0.85 ,  0.0 ,  0.53 }, { -0.82 ,  0.29 ,  0.5 }, { -0.52 ,  0.69 ,  0.5 }, 
            { -0.52 ,  0.69 ,  0.5 }, { -0.52 ,  0.69 ,  0.5 }, { -0.26 ,  0.81 ,  0.53 }, 
            { 0.02 ,  0.86 ,  0.5 }, { 0.49 ,  0.71 ,  0.5 }, { 0.49 ,  0.71 ,  0.5 }, 
            { 0.69 ,  0.5 ,  0.53 }, { 0.69 ,  0.5 ,  0.53 }, { 0.69 ,  0.5 ,  0.53 }, 
            { 0.83 ,  0.25 ,  0.5 }, { 0.08 ,  -0.25 ,  0.97 }, { 0.16 ,  -0.5 ,  0.85 }, 
            { 0.23 ,  -0.71 ,  0.67 }, { 0.23 ,  -0.71 ,  0.67 }, { 0.75 ,  0.0 ,  0.67 }, 
            { 0.75 ,  0.0 ,  0.67 }, { 0.53 ,  0.0 ,  0.85 }, { 0.26 ,  0.0 ,  0.97 }, 
            { -0.21 ,  -0.15 ,  0.97 }, { -0.43 ,  -0.31 ,  0.85 }, { -0.6 ,  -0.44 ,  0.67 }, 
            { -0.6 ,  -0.44 ,  0.67 }, { -0.21 ,  0.15 ,  0.97 }, { -0.43 ,  0.31 ,  0.85 }, 
            { -0.6 ,  0.44 ,  0.67 }, { -0.6 ,  0.44 ,  0.67 }, { 0.08 ,  0.25 ,  0.97 }, 
            { 0.16 ,  0.5 ,  0.85 }, { 0.23 ,  0.71 ,  0.67 }, { 0.23 ,  0.71 ,  0.67 }, 
            { 0.37 ,  0.27 ,  0.89 }, { 0.63 ,  0.27 ,  0.73 }, { 0.63 ,  0.27 ,  0.73 }, 
            { 0.45 ,  0.52 ,  0.73 }, { 0.45 ,  0.52 ,  0.73 }, { -0.14 ,  0.43 ,  0.89 }, 
            { -0.06 ,  0.68 ,  0.73 }, { -0.06 ,  0.68 ,  0.73 }, { -0.35 ,  0.59 ,  0.73 }, 
            { -0.35 ,  0.59 ,  0.73 }, { -0.46 ,  0.0 ,  0.89 }, { -0.67 ,  0.15 ,  0.73 }, 
            { -0.67 ,  0.15 ,  0.73 }, { -0.67 ,  -0.15 ,  0.73 }, { -0.67 ,  -0.15 ,  0.73 }, 
            { -0.14 ,  -0.43 ,  0.89 }, { -0.35 ,  -0.59 ,  0.73 }, { -0.35 ,  -0.59 ,  0.73 }, 
            { -0.06 ,  -0.68 ,  0.73 }, { -0.06 ,  -0.68 ,  0.73 }, { 0.37 ,  -0.27 ,  0.89 }, 
            { 0.45 ,  -0.52 ,  0.73 }, { 0.45 ,  -0.52 ,  0.73 }, { 0.63 ,  -0.27 ,  0.73 }, 
            { 0.63 ,  -0.27 ,  0.73 }, { 0.86 ,  0.43 ,  0.27 }, { 0.81 ,  0.59 ,  0.01 }, 
            { 0.68 ,  0.68 ,  0.27 }, { 0.68 ,  0.68 ,  0.27 }, { -0.15 ,  0.95 ,  0.27 }, 
            { -0.31 ,  0.95 ,  0.01 }, { -0.44 ,  0.86 ,  0.27 }, { -0.95 ,  0.15 ,  0.27 }, 
            { -1.0 ,  0.0 ,  0.01 }, { -0.95 ,  -0.15 ,  0.27 }, { -0.44 ,  -0.86 ,  0.27 }, 
            { -0.31 ,  -0.95 ,  0.01 }, { -0.15 ,  -0.95 ,  0.27 }, { 0.68 ,  -0.68 ,  0.27 }, 
            { 0.68 ,  -0.68 ,  0.27 }, { 0.81 ,  -0.59 ,  0.01 }, { 0.86 ,  -0.43 ,  0.27 }, 
            { 0.31 ,  0.95 ,  -0.01 }, { 0.44 ,  0.86 ,  -0.27 }, { 0.15 ,  0.95 ,  -0.27 }, 
            { -0.81 ,  0.59 ,  -0.01 }, { -0.68 ,  0.68 ,  -0.27 }, { -0.68 ,  0.68 ,  -0.27 }, 
            { -0.86 ,  0.43 ,  -0.27 }, { -0.81 ,  -0.59 ,  -0.01 }, { -0.86 ,  -0.43 ,  -0.27 }, 
            { -0.68 ,  -0.68 ,  -0.27 }, { -0.68 ,  -0.68 ,  -0.27 }, { 0.31 ,  -0.95 ,  -0.01 }, 
            { 0.15 ,  -0.95 ,  -0.27 }, { 0.44 ,  -0.86 ,  -0.27 }, { 1.0 ,  0.0 ,  -0.01 }, 
            { 0.95 ,  -0.15 ,  -0.27 }, { 0.95 ,  0.15 ,  -0.27 }, { 0.35 ,  0.59 ,  -0.73 }, 
            { 0.35 ,  0.59 ,  -0.73 }, { 0.14 ,  0.43 ,  -0.89 }, { 0.06 ,  0.68 ,  -0.73 }, 
            { 0.06 ,  0.68 ,  -0.73 }, { -0.45 ,  0.52 ,  -0.73 }, { -0.45 ,  0.52 ,  -0.73 }, 
            { -0.37 ,  0.27 ,  -0.89 }, { -0.63 ,  0.27 ,  -0.73 }, { -0.63 ,  0.27 ,  -0.73 }, 
            { -0.63 ,  -0.27 ,  -0.73 }, { -0.63 ,  -0.27 ,  -0.73 }, { -0.37 ,  -0.27 ,  -0.89 }, 
            { -0.45 ,  -0.52 ,  -0.73 }, { -0.45 ,  -0.52 ,  -0.73 }, { 0.67 ,  0.15 ,  -0.73 }, 
            { 0.67 ,  0.15 ,  -0.73 }, { 0.67 ,  -0.15 ,  -0.73 }, { 0.67 ,  -0.15 ,  -0.73 }, 
            { 0.46 ,  0.0 ,  -0.89 }, { 0.06 ,  -0.68 ,  -0.73 }, { 0.06 ,  -0.68 ,  -0.73 }, 
            { 0.14 ,  -0.43 ,  -0.89 }, { 0.35 ,  -0.59 ,  -0.73 }, { 0.35 ,  -0.59 ,  -0.73 }, 
        });

        texcoords.assign({
            { 0.83 ,  0.54 }, { 0.06 ,  0.31 }, { 0.65 ,  0.44 }, 
            { 0.42 ,  0.44 }, { 0.61 ,  0.19 }, { 0.1 ,  0.44 }, 
            { 0.33 ,  0.44 }, { 0.06 ,  0.07 }, { 0.56 ,  0.65 }, 
            { 0.4 ,  0.07 }, { 0.33 ,  0.65 }, { 0.4 ,  0.31 }, 
            { 0.0 ,  0.65 }, { 0.23 ,  0.65 }, { 0.27 ,  0.19 }, 
            { 0.84 ,  0.17 }, { 0.78 ,  0.37 }, { 0.43 ,  0.4 }, 
            { 0.79 ,  0.42 }, { 0.81 ,  0.49 }, { 0.88 ,  0.51 }, 
            { 0.93 ,  0.47 }, { 0.02 ,  0.29 }, { 0.97 ,  0.44 }, 
            { 0.61 ,  0.42 }, { 0.95 ,  0.38 }, { 0.05 ,  0.34 }, 
            { 0.55 ,  0.42 }, { 0.48 ,  0.43 }, { 0.05 ,  0.12 }, 
            { 0.05 ,  0.19 }, { 0.05 ,  0.26 }, { 0.88 ,  0.57 }, 
            { 0.93 ,  0.61 }, { 0.02 ,  0.08 }, { 0.97 ,  0.64 }, 
            { 0.65 ,  0.54 }, { 0.65 ,  0.19 }, { 0.71 ,  0.54 }, 
            { 0.77 ,  0.54 }, { 0.37 ,  0.43 }, { 0.72 ,  0.37 }, 
            { 0.62 ,  0.07 }, { 0.33 ,  0.43 }, { 0.67 ,  0.42 }, 
            { 0.62 ,  0.13 }, { 0.78 ,  0.71 }, { 0.1 ,  0.4 }, 
            { 0.79 ,  0.66 }, { 0.81 ,  0.6 }, { 0.62 ,  0.24 }, 
            { 0.0 ,  0.43 }, { 0.62 ,  0.3 }, { 0.67 ,  0.66 }, 
            { 0.05 ,  0.43 }, { 0.72 ,  0.71 }, { 0.15 ,  0.43 }, 
            { 0.22 ,  0.42 }, { 0.28 ,  0.42 }, { 0.05 ,  0.03 }, 
            { 0.95 ,  0.7 }, { 0.23 ,  0.22 }, { 0.17 ,  0.26 }, 
            { 0.11 ,  0.29 }, { 0.11 ,  0.08 }, { 0.17 ,  0.12 }, 
            { 0.23 ,  0.15 }, { 0.53 ,  0.6 }, { 0.49 ,  0.55 }, 
            { 0.45 ,  0.49 }, { 0.11 ,  0.34 }, { 0.65 ,  0.48 }, 
            { 0.63 ,  0.54 }, { 0.17 ,  0.37 }, { 0.59 ,  0.6 }, 
            { 0.44 ,  0.08 }, { 0.5 ,  0.12 }, { 0.56 ,  0.15 }, 
            { 0.39 ,  0.49 }, { 0.36 ,  0.55 }, { 0.5 ,  0.0 }, 
            { 0.33 ,  0.61 }, { 0.44 ,  0.03 }, { 0.01 ,  0.61 }, 
            { 0.44 ,  0.34 }, { 0.03 ,  0.55 }, { 0.5 ,  0.37 }, 
            { 0.06 ,  0.49 }, { 0.56 ,  0.22 }, { 0.5 ,  0.26 }, 
            { 0.44 ,  0.29 }, { 0.27 ,  0.6 }, { 0.17 ,  0.0 }, 
            { 0.3 ,  0.54 }, { 0.32 ,  0.48 }, { 0.11 ,  0.03 }, 
            { 0.13 ,  0.49 }, { 0.16 ,  0.55 }, { 0.2 ,  0.6 }, 
            { 0.28 ,  0.24 }, { 0.69 ,  0.28 }, { 0.29 ,  0.3 }, 
            { 0.65 ,  0.66 }, { 0.61 ,  0.66 }, { 0.73 ,  0.33 }, 
            { 0.5 ,  0.66 }, { 0.43 ,  0.67 }, { 0.39 ,  0.03 }, 
            { 0.97 ,  0.32 }, { 0.37 ,  0.67 }, { 0.39 ,  0.12 }, 
            { 0.38 ,  0.19 }, { 0.39 ,  0.26 }, { 0.04 ,  0.67 }, 
            { 0.97 ,  0.01 }, { 0.39 ,  0.34 }, { 0.11 ,  0.67 }, 
            { 0.17 ,  0.66 }, { 0.73 ,  0.0 }, { 0.28 ,  0.66 }, 
            { 0.29 ,  0.07 }, { 0.69 ,  0.05 }, { 0.33 ,  0.66 }, 
            { 0.28 ,  0.13 }, { 0.83 ,  0.22 }, { 0.81 ,  0.28 }, 
            { 0.55 ,  0.7 }, { 0.79 ,  0.33 }, { 0.32 ,  0.19 }, 
            { 0.67 ,  0.17 }, { 0.72 ,  0.17 }, { 0.79 ,  0.17 }, 
            { 0.89 ,  0.2 }, { 0.94 ,  0.24 }, { 0.35 ,  0.08 }, 
            { 0.99 ,  0.27 }, { 0.89 ,  0.13 }, { 0.94 ,  0.09 }, 
            { 0.35 ,  0.29 }, { 0.99 ,  0.06 }, { 0.83 ,  0.11 }, 
            { 0.81 ,  0.05 }, { 0.22 ,  0.7 }, { 0.79 ,  0.0 }, 
            { 0.76 ,  0.11 }, { 0.7 ,  0.11 }, { 0.33 ,  0.13 }, 
            { 0.74 ,  0.04 }, { 0.27 ,  0.71 }, { 0.88 ,  0.07 }, 
            { 0.86 ,  0.01 }, { 0.16 ,  0.71 }, { 0.93 ,  0.03 }, 
            { 0.09 ,  0.72 }, { 0.95 ,  0.17 }, { 1.0 ,  0.13 }, 
            { 0.34 ,  0.22 }, { 1.0 ,  0.2 }, { 0.34 ,  0.15 }, 
            { 0.88 ,  0.26 }, { 0.93 ,  0.3 }, { 0.41 ,  0.72 }, 
            { 0.86 ,  0.33 }, { 0.48 ,  0.71 }, { 0.76 ,  0.23 }, 
            { 0.74 ,  0.29 }, { 0.6 ,  0.71 }, { 0.7 ,  0.23 }, 
            { 0.33 ,  0.25 }, { 0.23 ,  0.09 }, { 0.17 ,  0.05 }, 
            { 0.23 ,  0.03 }, { 0.32 ,  0.6 }, { 0.13 ,  0.61 }, 
            { 0.09 ,  0.55 }, { 0.06 ,  0.61 }, { 0.44 ,  0.22 }, 
            { 0.5 ,  0.19 }, { 0.44 ,  0.15 }, { 0.39 ,  0.61 }, 
            { 0.42 ,  0.55 }, { 0.46 ,  0.61 }, { 0.65 ,  0.6 }, 
            { 0.23 ,  0.35 }, { 0.17 ,  0.32 }, { 0.23 ,  0.29 }, 
            { 0.24 ,  0.54 }, { 0.26 ,  0.48 }, { 0.19 ,  0.48 }, 
            { 0.5 ,  0.32 }, { 0.01 ,  0.49 }, { 0.57 ,  0.35 }, 
            { 0.57 ,  0.29 }, { 0.5 ,  0.05 }, { 0.57 ,  0.09 }, 
            { 0.57 ,  0.03 }, { 0.33 ,  0.49 }, { 0.56 ,  0.54 }, 
            { 0.52 ,  0.48 }, { 0.59 ,  0.48 }, { 0.17 ,  0.19 }, 
            { 0.1 ,  0.22 }, { 0.1 ,  0.15 }, { 0.91 ,  0.68 }, 
            { 0.24 ,  0.37 }, { 0.86 ,  0.64 }, { 0.84 ,  0.7 }, 
            { 0.17 ,  0.38 }, { 0.73 ,  0.66 }, { 0.05 ,  0.38 }, 
            { 0.75 ,  0.6 }, { 0.68 ,  0.6 }, { 0.67 ,  0.25 }, 
            { 0.68 ,  0.48 }, { 0.67 ,  0.13 }, { 0.75 ,  0.48 }, 
            { 0.73 ,  0.42 }, { 0.38 ,  0.38 }, { 0.0 ,  0.15 }, 
            { 0.98 ,  0.58 }, { 0.0 ,  0.22 }, { 0.98 ,  0.5 }, 
            { 0.93 ,  0.54 }, { 0.84 ,  0.38 }, { 0.5 ,  0.38 }, 
            { 0.86 ,  0.44 }, { 0.91 ,  0.4 }, { 0.57 ,  0.37 }, 
        });

        indices.assign({
            0 ,  20 ,  19 ,  1 ,  22 ,  31 ,  0 ,  19 ,  39 , 
            0 ,  39 ,  49 ,  0 ,  49 ,  32 ,  1 ,  31 ,  63 , 
            3 ,  28 ,  69 ,  4 ,  45 ,  77 ,  5 ,  54 ,  87 , 
            6 ,  58 ,  94 ,  1 ,  63 ,  70 ,  3 ,  69 ,  78 , 
            4 ,  77 ,  88 ,  5 ,  87 ,  96 ,  7 ,  95 ,  64 , 
            8 ,  103 ,  126 ,  9 ,  107 ,  134 ,  11 ,  112 ,  138 , 
            13 ,  117 ,  142 ,  14 ,  123 ,  128 ,  131 ,  140 ,  15 , 
            130 ,  144 ,  131 ,  129 ,  145 ,  130 ,  131 ,  144 ,  140 , 
            144 ,  141 ,  140 ,  130 ,  145 ,  144 ,  145 ,  147 ,  144 , 
            144 ,  147 ,  141 ,  147 ,  143 ,  141 ,  128 ,  123 ,  146 , 
            123 ,  120 ,  146 ,  145 ,  121 ,  147 ,  121 ,  118 ,  147 , 
            148 ,  119 ,  142 ,  119 ,  13 ,  142 ,  140 ,  136 ,  15 , 
            141 ,  149 ,  140 ,  143 ,  150 ,  141 ,  140 ,  149 ,  136 , 
            149 ,  137 ,  136 ,  141 ,  150 ,  149 ,  150 ,  152 ,  149 , 
            149 ,  152 ,  137 ,  152 ,  139 ,  137 ,  142 ,  117 ,  151 , 
            117 ,  116 ,  151 ,  151 ,  116 ,  153 ,  116 ,  113 ,  153 , 
            152 ,  114 ,  139 ,  115 ,  11 ,  138 ,  136 ,  132 ,  15 , 
            137 ,  154 ,  136 ,  139 ,  155 ,  137 ,  136 ,  154 ,  132 , 
            154 ,  133 ,  132 ,  137 ,  155 ,  154 ,  155 ,  157 ,  154 , 
            154 ,  157 ,  133 ,  157 ,  135 ,  133 ,  138 ,  112 ,  156 , 
            112 ,  111 ,  156 ,  156 ,  111 ,  158 ,  111 ,  110 ,  158 , 
            158 ,  110 ,  134 ,  110 ,  9 ,  134 ,  132 ,  124 ,  15 , 
            133 ,  159 ,  132 ,  135 ,  160 ,  133 ,  132 ,  159 ,  124 , 
            159 ,  125 ,  124 ,  133 ,  160 ,  159 ,  160 ,  162 ,  159 , 
            159 ,  162 ,  125 ,  162 ,  127 ,  125 ,  135 ,  108 ,  160 , 
            109 ,  106 ,  161 ,  161 ,  106 ,  163 ,  106 ,  105 ,  163 , 
            163 ,  105 ,  126 ,  105 ,  8 ,  126 ,  124 ,  131 ,  15 , 
            125 ,  164 ,  124 ,  127 ,  165 ,  125 ,  124 ,  164 ,  131 , 
            164 ,  130 ,  131 ,  125 ,  165 ,  164 ,  165 ,  167 ,  164 , 
            164 ,  167 ,  130 ,  167 ,  129 ,  130 ,  126 ,  103 ,  166 , 
            104 ,  100 ,  165 ,  165 ,  100 ,  167 ,  101 ,  99 ,  168 , 
            168 ,  99 ,  128 ,  99 ,  14 ,  128 ,  66 ,  123 ,  14 , 
            65 ,  169 ,  66 ,  64 ,  170 ,  65 ,  66 ,  169 ,  123 , 
            169 ,  120 ,  123 ,  65 ,  170 ,  169 ,  170 ,  171 ,  169 , 
            169 ,  171 ,  120 ,  172 ,  119 ,  122 ,  64 ,  95 ,  170 , 
            95 ,  92 ,  170 ,  170 ,  92 ,  171 ,  93 ,  91 ,  172 , 
            172 ,  91 ,  119 ,  91 ,  13 ,  119 ,  98 ,  117 ,  13 , 
            97 ,  173 ,  98 ,  96 ,  174 ,  97 ,  98 ,  173 ,  117 , 
            173 ,  116 ,  117 ,  97 ,  174 ,  173 ,  174 ,  175 ,  173 , 
            173 ,  175 ,  116 ,  175 ,  113 ,  116 ,  96 ,  87 ,  174 , 
            87 ,  85 ,  174 ,  174 ,  85 ,  175 ,  85 ,  83 ,  175 , 
            175 ,  83 ,  113 ,  83 ,  12 ,  113 ,  90 ,  112 ,  11 , 
            89 ,  176 ,  90 ,  88 ,  177 ,  89 ,  90 ,  176 ,  112 , 
            176 ,  111 ,  112 ,  89 ,  177 ,  176 ,  177 ,  178 ,  176 , 
            176 ,  178 ,  111 ,  178 ,  110 ,  111 ,  88 ,  77 ,  177 , 
            77 ,  76 ,  177 ,  177 ,  76 ,  178 ,  76 ,  75 ,  178 , 
            178 ,  75 ,  110 ,  75 ,  9 ,  110 ,  81 ,  109 ,  10 , 
            79 ,  179 ,  81 ,  78 ,  180 ,  79 ,  81 ,  179 ,  109 , 
            179 ,  106 ,  109 ,  79 ,  180 ,  179 ,  180 ,  181 ,  179 , 
            179 ,  181 ,  106 ,  181 ,  105 ,  106 ,  78 ,  69 ,  180 , 
            69 ,  68 ,  180 ,  180 ,  68 ,  181 ,  68 ,  67 ,  181 , 
            181 ,  67 ,  105 ,  67 ,  8 ,  105 ,  74 ,  103 ,  8 , 
            72 ,  182 ,  74 ,  70 ,  184 ,  73 ,  74 ,  182 ,  103 , 
            182 ,  102 ,  103 ,  73 ,  184 ,  183 ,  184 ,  185 ,  183 , 
            183 ,  185 ,  101 ,  185 ,  99 ,  101 ,  70 ,  63 ,  184 , 
            63 ,  62 ,  184 ,  184 ,  62 ,  185 ,  62 ,  61 ,  185 , 
            185 ,  61 ,  99 ,  61 ,  14 ,  99 ,  91 ,  98 ,  13 , 
            93 ,  186 ,  91 ,  94 ,  187 ,  93 ,  91 ,  186 ,  98 , 
            186 ,  97 ,  98 ,  93 ,  187 ,  186 ,  187 ,  188 ,  186 , 
            186 ,  188 ,  97 ,  188 ,  96 ,  97 ,  94 ,  58 ,  187 , 
            58 ,  57 ,  187 ,  187 ,  57 ,  188 ,  57 ,  56 ,  188 , 
            188 ,  56 ,  96 ,  56 ,  5 ,  96 ,  84 ,  90 ,  11 , 
            86 ,  189 ,  84 ,  87 ,  190 ,  85 ,  84 ,  189 ,  90 , 
            189 ,  89 ,  90 ,  86 ,  191 ,  189 ,  191 ,  192 ,  189 , 
            189 ,  192 ,  89 ,  192 ,  88 ,  89 ,  87 ,  54 ,  190 , 
            54 ,  51 ,  190 ,  191 ,  52 ,  192 ,  52 ,  50 ,  192 , 
            192 ,  50 ,  88 ,  50 ,  4 ,  88 ,  75 ,  82 ,  9 , 
            76 ,  193 ,  75 ,  77 ,  194 ,  76 ,  75 ,  193 ,  82 , 
            193 ,  80 ,  82 ,  76 ,  194 ,  193 ,  194 ,  195 ,  193 , 
            193 ,  195 ,  80 ,  196 ,  78 ,  79 ,  77 ,  45 ,  194 , 
            45 ,  42 ,  194 ,  194 ,  42 ,  195 ,  43 ,  40 ,  196 , 
            196 ,  40 ,  78 ,  40 ,  3 ,  78 ,  67 ,  74 ,  8 , 
            68 ,  197 ,  67 ,  69 ,  198 ,  68 ,  67 ,  197 ,  74 , 
            197 ,  72 ,  74 ,  68 ,  198 ,  197 ,  198 ,  199 ,  197 , 
            197 ,  199 ,  72 ,  199 ,  71 ,  72 ,  69 ,  28 ,  198 , 
            28 ,  27 ,  198 ,  198 ,  27 ,  199 ,  27 ,  24 ,  199 , 
            199 ,  24 ,  71 ,  24 ,  2 ,  71 ,  61 ,  66 ,  14 , 
            62 ,  200 ,  61 ,  63 ,  201 ,  62 ,  61 ,  200 ,  66 , 
            200 ,  65 ,  66 ,  62 ,  201 ,  200 ,  201 ,  202 ,  200 , 
            200 ,  202 ,  65 ,  202 ,  64 ,  65 ,  63 ,  31 ,  201 , 
            31 ,  30 ,  201 ,  201 ,  30 ,  202 ,  30 ,  29 ,  202 , 
            202 ,  29 ,  64 ,  29 ,  7 ,  64 ,  34 ,  59 ,  7 , 
            33 ,  203 ,  35 ,  32 ,  205 ,  33 ,  35 ,  203 ,  60 , 
            204 ,  57 ,  58 ,  33 ,  205 ,  203 ,  205 ,  206 ,  203 , 
            204 ,  207 ,  57 ,  207 ,  56 ,  57 ,  32 ,  49 ,  205 , 
            49 ,  48 ,  205 ,  205 ,  48 ,  206 ,  48 ,  46 ,  206 , 
            207 ,  47 ,  56 ,  47 ,  5 ,  56 ,  47 ,  54 ,  5 , 
            48 ,  208 ,  46 ,  49 ,  210 ,  48 ,  47 ,  209 ,  54 , 
            208 ,  53 ,  55 ,  48 ,  210 ,  208 ,  210 ,  211 ,  208 , 
            208 ,  211 ,  53 ,  212 ,  50 ,  52 ,  49 ,  39 ,  210 , 
            39 ,  38 ,  210 ,  210 ,  38 ,  211 ,  38 ,  36 ,  211 , 
            212 ,  37 ,  50 ,  37 ,  4 ,  50 ,  37 ,  45 ,  4 , 
            38 ,  213 ,  36 ,  39 ,  215 ,  38 ,  37 ,  214 ,  45 , 
            214 ,  42 ,  45 ,  38 ,  215 ,  213 ,  215 ,  216 ,  213 , 
            213 ,  216 ,  44 ,  216 ,  41 ,  44 ,  39 ,  19 ,  215 , 
            19 ,  18 ,  215 ,  215 ,  18 ,  216 ,  18 ,  16 ,  216 , 
            217 ,  17 ,  40 ,  17 ,  3 ,  40 ,  29 ,  34 ,  7 , 
            30 ,  218 ,  29 ,  31 ,  220 ,  30 ,  29 ,  218 ,  34 , 
            219 ,  33 ,  35 ,  30 ,  220 ,  218 ,  221 ,  222 ,  219 , 
            219 ,  222 ,  33 ,  222 ,  32 ,  33 ,  31 ,  22 ,  220 , 
            23 ,  21 ,  221 ,  221 ,  21 ,  222 ,  21 ,  20 ,  222 , 
            222 ,  20 ,  32 ,  20 ,  0 ,  32 ,  17 ,  28 ,  3 , 
            18 ,  223 ,  16 ,  19 ,  225 ,  18 ,  17 ,  224 ,  28 , 
            224 ,  27 ,  28 ,  18 ,  225 ,  223 ,  225 ,  226 ,  223 , 
            224 ,  227 ,  27 ,  227 ,  24 ,  27 ,  19 ,  20 ,  225 , 
            20 ,  21 ,  225 ,  225 ,  21 ,  226 ,  21, 23, 226,
			226, 23, 25, 22, 1, 26
        });

        compute_centroid();
        createPointBuffer();
        createColorBuffer();
        createNormalBuffer();
        createTexCoordBuffer();
        createIndexBuffer();
        return true;
    }

    bool load_obj(std::string objPath);

    bool load_stl(std::string stlPath);

    bool load_glb(std::string glbPath);

  private:
    void createBuffer(vk::DeviceSize size, vk::BufferUsageFlags usage, vk::MemoryPropertyFlags properties, vk::Buffer &buffer, vk::DeviceMemory &bufferMemory)
    {
        auto vulkan = Libraries::Vulkan::Get();
        auto device = vulkan->get_device();

        /* To create a VBO, we need to use this struct: */
        vk::BufferCreateInfo bufferInfo;
        bufferInfo.size = size;
        bufferInfo.usage = usage;
        bufferInfo.sharingMode = vk::SharingMode::eExclusive;

        /* Now create the buffer */
        buffer = device.createBuffer(bufferInfo);

        /* Identify the memory requirements for the vertex buffer */
        vk::MemoryRequirements memRequirements = device.getBufferMemoryRequirements(buffer);

        /* Look for a suitable type that meets our property requirements */
        vk::MemoryAllocateInfo allocInfo;
        allocInfo.allocationSize = memRequirements.size;
        allocInfo.memoryTypeIndex = vulkan->find_memory_type(memRequirements.memoryTypeBits, properties);

        /* Now, allocate the memory for that buffer */
        bufferMemory = device.allocateMemory(allocInfo);

        /* Associate the allocated memory with the VBO handle */
        device.bindBufferMemory(buffer, bufferMemory, 0);
    }

    void createPointBuffer()
    {
        auto vulkan = Libraries::Vulkan::Get();
        auto device = vulkan->get_device();

        vk::DeviceSize bufferSize = points.size() * sizeof(glm::vec3);
        vk::Buffer stagingBuffer;
        vk::DeviceMemory stagingBufferMemory;
        createBuffer(bufferSize, vk::BufferUsageFlagBits::eTransferSrc, vk::MemoryPropertyFlagBits::eHostVisible | vk::MemoryPropertyFlagBits::eHostCoherent, stagingBuffer, stagingBufferMemory);

        /* Map the memory to a pointer on the host */
        void *data = device.mapMemory(stagingBufferMemory, 0, bufferSize,  vk::MemoryMapFlags());

        /* Copy over our vertex data, then unmap */
        memcpy(data, points.data(), (size_t)bufferSize);
        device.unmapMemory(stagingBufferMemory);

        createBuffer(bufferSize, vk::BufferUsageFlagBits::eTransferDst | vk::BufferUsageFlagBits::eVertexBuffer, vk::MemoryPropertyFlagBits::eDeviceLocal, pointBuffer, pointBufferMemory);
        
        auto cmd = vulkan->begin_one_time_graphics_command(1);
        vk::BufferCopy copyRegion;
		copyRegion.size = bufferSize;
        cmd.copyBuffer(stagingBuffer, pointBuffer, copyRegion);
        vulkan->end_one_time_graphics_command(cmd, 1);

        /* Clean up the staging buffer */
        device.destroyBuffer(stagingBuffer);
        device.freeMemory(stagingBufferMemory);
    }

    void createColorBuffer()
    {
        auto vulkan = Libraries::Vulkan::Get();
        auto device = vulkan->get_device();

        vk::DeviceSize bufferSize = colors.size() * sizeof(glm::vec4);
        vk::Buffer stagingBuffer;
        vk::DeviceMemory stagingBufferMemory;
        createBuffer(bufferSize, vk::BufferUsageFlagBits::eTransferSrc, vk::MemoryPropertyFlagBits::eHostVisible | vk::MemoryPropertyFlagBits::eHostCoherent, stagingBuffer, stagingBufferMemory);

        /* Map the memory to a pointer on the host */
        void *data = device.mapMemory(stagingBufferMemory, 0, bufferSize,  vk::MemoryMapFlags());

        /* Copy over our vertex data, then unmap */
        memcpy(data, colors.data(), (size_t)bufferSize);
        device.unmapMemory(stagingBufferMemory);

        createBuffer(bufferSize, vk::BufferUsageFlagBits::eTransferDst | vk::BufferUsageFlagBits::eVertexBuffer, vk::MemoryPropertyFlagBits::eDeviceLocal, colorBuffer, colorBufferMemory);
        
        auto cmd = vulkan->begin_one_time_graphics_command(1);
        vk::BufferCopy copyRegion;
		copyRegion.size = bufferSize;
        cmd.copyBuffer(stagingBuffer, colorBuffer, copyRegion);
        vulkan->end_one_time_graphics_command(cmd, 1);

        /* Clean up the staging buffer */
        device.destroyBuffer(stagingBuffer);
        device.freeMemory(stagingBufferMemory);
    }

    void createIndexBuffer()
    {
        auto vulkan = Libraries::Vulkan::Get();
        auto device = vulkan->get_device();

        vk::DeviceSize bufferSize = indices.size() * sizeof(uint32_t);
        vk::Buffer stagingBuffer;
        vk::DeviceMemory stagingBufferMemory;
        createBuffer(bufferSize, vk::BufferUsageFlagBits::eTransferSrc, vk::MemoryPropertyFlagBits::eHostVisible | vk::MemoryPropertyFlagBits::eHostCoherent, stagingBuffer, stagingBufferMemory);

        void *data = device.mapMemory(stagingBufferMemory, 0, bufferSize, vk::MemoryMapFlags());
        memcpy(data, indices.data(), (size_t)bufferSize);
        device.unmapMemory(stagingBufferMemory);

        createBuffer(bufferSize, vk::BufferUsageFlagBits::eTransferDst | vk::BufferUsageFlagBits::eIndexBuffer, vk::MemoryPropertyFlagBits::eDeviceLocal, indexBuffer, indexBufferMemory);
        
        auto cmd = vulkan->begin_one_time_graphics_command(1);
        vk::BufferCopy copyRegion;
		copyRegion.size = bufferSize;
        cmd.copyBuffer(stagingBuffer, indexBuffer, copyRegion);
        vulkan->end_one_time_graphics_command(cmd, 1);

        device.destroyBuffer(stagingBuffer);
        device.freeMemory(stagingBufferMemory);
    }

    void createNormalBuffer()
    {
        auto vulkan = Libraries::Vulkan::Get();
        auto device = vulkan->get_device();

        vk::DeviceSize bufferSize = normals.size() * sizeof(glm::vec3);
        vk::Buffer stagingBuffer;
        vk::DeviceMemory stagingBufferMemory;
        createBuffer(bufferSize, vk::BufferUsageFlagBits::eTransferSrc, vk::MemoryPropertyFlagBits::eHostVisible | vk::MemoryPropertyFlagBits::eHostCoherent, stagingBuffer, stagingBufferMemory);

        /* Map the memory to a pointer on the host */
        void *data = device.mapMemory(stagingBufferMemory, 0, bufferSize, vk::MemoryMapFlags());

        /* Copy over our normal data, then unmap */
        memcpy(data, normals.data(), (size_t)bufferSize);
        device.unmapMemory(stagingBufferMemory);

        createBuffer(bufferSize, vk::BufferUsageFlagBits::eTransferDst | vk::BufferUsageFlagBits::eVertexBuffer, vk::MemoryPropertyFlagBits::eDeviceLocal, normalBuffer, normalBufferMemory);
        
        auto cmd = vulkan->begin_one_time_graphics_command(1);
        vk::BufferCopy copyRegion;
		copyRegion.size = bufferSize;
        cmd.copyBuffer(stagingBuffer, normalBuffer, copyRegion);
        vulkan->end_one_time_graphics_command(cmd, 1);

        /* Clean up the staging buffer */
        device.destroyBuffer(stagingBuffer);
        device.freeMemory(stagingBufferMemory);
    }

    void createTexCoordBuffer()
    {
        auto vulkan = Libraries::Vulkan::Get();
        auto device = vulkan->get_device();

        vk::DeviceSize bufferSize = texcoords.size() * sizeof(glm::vec2);
        vk::Buffer stagingBuffer;
        vk::DeviceMemory stagingBufferMemory;
        createBuffer(bufferSize, vk::BufferUsageFlagBits::eTransferSrc, vk::MemoryPropertyFlagBits::eHostVisible | vk::MemoryPropertyFlagBits::eHostCoherent, stagingBuffer, stagingBufferMemory);

        /* Map the memory to a pointer on the host */
        void *data = device.mapMemory(stagingBufferMemory, 0, bufferSize, vk::MemoryMapFlags());

        /* Copy over our normal data, then unmap */
        memcpy(data, texcoords.data(), (size_t)bufferSize);
        device.unmapMemory(stagingBufferMemory);

        createBuffer(bufferSize, vk::BufferUsageFlagBits::eTransferDst | vk::BufferUsageFlagBits::eVertexBuffer, vk::MemoryPropertyFlagBits::eDeviceLocal, texCoordBuffer, texCoordBufferMemory);
        
        auto cmd = vulkan->begin_one_time_graphics_command(1);
        vk::BufferCopy copyRegion;
		copyRegion.size = bufferSize;
        cmd.copyBuffer(stagingBuffer, texCoordBuffer, copyRegion);
        vulkan->end_one_time_graphics_command(cmd, 1);

        /* Clean up the staging buffer */
        device.destroyBuffer(stagingBuffer);
        device.freeMemory(stagingBufferMemory);
    }
};
