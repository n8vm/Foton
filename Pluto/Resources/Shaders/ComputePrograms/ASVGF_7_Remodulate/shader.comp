#version 460

#define COMPUTE

#include "Pluto/Resources/Shaders/Common/Descriptors.hxx"
#include "Pluto/Resources/Shaders/Common/ShaderConstants.hxx"
#include "Pluto/Resources/Shaders/Common/Options.hxx"
#include "Pluto/Resources/Shaders/Common/Utilities.hxx"

#include "Pluto/Resources/Shaders/Common/DisneyBSDF.hxx"
#include "Pluto/Resources/Shaders/Common/ShaderCommon.hxx"
#include "Pluto/Resources/Shaders/Common/Options.hxx"
#include "Pluto/Resources/Shaders/Common/ShaderConstants.hxx"

layout (local_size_x = 16, local_size_y = 16) in;

void main() {
    init_random(ivec2(gl_GlobalInvocationID.xy), push.consts.frame, 0);
    const ivec2 ipos = ivec2(gl_GlobalInvocationID.xy);
    vec3 color;

    vec4 temp = imageLoad(gbuffers[SEED_LUMINANCE_ADDR], ipos);
    ivec2 pixel_seed = ivec2(temp.xy);
    int frame_seed = int(temp.z);

    vec3 origin, direction;
    EntityStruct camera_entity = ebo.entities[push.consts.camera_id];
    CameraStruct camera = cbo.cameras[camera_entity.camera_id];
    TransformStruct camera_transform = tbo.transforms[camera_entity.transform_id];
    int multiview_idx = push.consts.viewIndex;
    multiview_idx = 0; // temporary

    get_origin_and_direction(
        pixel_seed, frame_seed,
        camera.multiviews[multiview_idx].projinv,
        camera_transform.localToWorld * camera.multiviews[multiview_idx].viewinv,
        ipos, ivec2(push.consts.width, push.consts.height), origin, direction);
        
    // Normal G Buffer
    temp = imageLoad(gbuffers[NORMAL_ID_ADDR], ipos);
    vec3 w_n = temp.xyz;
    int entity_id = int(temp.w);

    if (entity_id == -1) {
        color = get_environment_color(direction);
    }
    else {
        // Position G Buffer 
        temp = imageLoad(gbuffers[POSITION_DEPTH_ADDR], ipos);
        vec3 w_p = temp.xyz;
        float depth = temp.w;

        // UV G Buffer
        temp = imageLoad(gbuffers[UV_METALLIC_ROUGHESS_ADDR], ipos);
        vec2 uv = temp.xy;

        // Raw albedo
        temp = imageLoad(gbuffers[ALBEDO_ADDR], ipos);
        vec3 albedo = temp.xyz;

        EntityStruct entity; MaterialStruct mat; LightStruct light;
        unpack_entity_struct(entity_id, entity);
        unpack_material_struct(entity_id, entity, uv, w_p, mat);
        unpack_light_struct(entity_id, entity, light);
        
        vec3 diffuse_color;
        vec3 w_n_f = /*(backface) ? -w_n : */w_n;
        vec3 w_o = -direction;
        vec3 w_s = reflect(-w_o, w_n);
        vec3 w_i = w_s;
        vec3 w_h = (w_i+w_o)/length(w_i+w_o);

        float f0 = 0.00;
        float F = f0 + (1.0 - f0) * pow(1.0 - max(0, dot(w_h, w_i )), 5);

        float m = disney_diffuse(mat, w_n_f, w_o, w_i, diffuse_color);
        float mat_estimator = pow2(1.0 - F)*m*M_PI;
        float specular_estimator = F;

        vec3 indirect = imageLoad(gbuffers[DIFFUSE_ILLUM_VAR_ADDR], ivec2(gl_GlobalInvocationID.xy)).rgb;
        vec3 glossy = imageLoad(gbuffers[SPECULAR_ILLUM_VAR_ADDR], ivec2(gl_GlobalInvocationID.xy)).rgb;
        color = indirect * mat_estimator * diffuse_color + glossy * specular_estimator;
    }

    imageStore(render_image, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1.0));
    // imageStore(render_image, ivec2(gl_GlobalInvocationID.xy), vec4(direction, 1.0));
}