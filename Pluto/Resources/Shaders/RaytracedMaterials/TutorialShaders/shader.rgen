#version 460
#extension GL_NV_ray_tracing : require
#define RAYTRACING

#include "Pluto/Resources/Shaders/Descriptors.hxx"

layout(location = 0) rayPayloadNV HitInfo payload;

void main() 
{
    const vec2 pixelCenter = vec2(gl_LaunchIDNV.xy) + vec2(0.5);
    const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeNV.xy);

    vec3 w_normal = imageLoad(normal_image, ivec2(gl_LaunchIDNV.xy)).xyz;
    vec3 w_position = imageLoad(position_image, ivec2(gl_LaunchIDNV.xy)).xyz;
    vec4 raster_contribution = imageLoad(render_image, ivec2(gl_LaunchIDNV.xy));

    EntityStruct camera_entity = ebo.entities[push.consts.camera_id];
    CameraStruct camera = cbo.cameras[camera_entity.camera_id];
    TransformStruct camera_transform = tbo.transforms[camera_entity.transform_id];

    /* Note, multiview not supported in rgen shaders */
    vec3 w_cameraPos = vec3(camera_transform.localToWorld[3]);
    vec3 w_cameraDir = normalize(w_cameraPos - w_position);

    vec3 w_view = normalize(w_cameraDir);
	vec3 w_refl = -normalize(reflect(w_view, w_normal));	

    /* No object in view. TODO: change to entity*/
    if (length(w_position) < .0001) return;




    // const uint cullMask = 0xFF;
    // const uint sbtRecordOffset = 0;
    // const uint sbtRecordStride = 0;
    // const uint missIndex = 0;
    // const float tmin = 0.0f;
    // const float tmax = 10000.0f;
    // const int payloadLocation = 0;

    // traceNV(topLevelAS,
    //          rayFlags,
    //          cullMask,
    //          sbtRecordOffset,
    //          sbtRecordStride,
    //          missIndex,
    //          origin,
    //          tmin,
    //          direction,
    //          tmax,
    //          payloadLocation);

    // uint rayFlags = gl_RayFlagsOpaqueNV;
    // uint rayFlags = gl_RayFlagsCullBackFacingTrianglesNV ;
    uint rayFlags = gl_RayFlagsCullBackFacingTrianglesNV ;
    uint cullMask = 0xff;
	float tmin = .1;
    float tmax = 100.0;
    payload.color = vec4(0.0, 0.0, 0.0, 0.0);

    /* Trace reflections */
    traceNV(topLevelAS, rayFlags, cullMask, 0, 0, 0, w_position.xyz, tmin, w_refl.xyz, tmax, 0);

    imageStore(render_image, ivec2(gl_LaunchIDNV.xy), raster_contribution + payload.color);
}