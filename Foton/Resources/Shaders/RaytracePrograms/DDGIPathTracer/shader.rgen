#version 460
#extension GL_NV_ray_tracing : require
#define GLOBAL_RAYTRACING

#include "Foton/Resources/Shaders/Common/Descriptors.hxx"
layout(location = 0) rayPayloadNV HitInfo payload;
#include "Foton/Resources/Shaders/Common/ShaderCommon.hxx"
#include "Foton/Resources/Shaders/Common/Options.hxx"
#include "Foton/Resources/Shaders/Common/ShaderConstants.hxx"
#include "Foton/Resources/Shaders/Common/OffsetRay.hxx"


void main() 
{
    ivec2 gid = ivec2(gl_LaunchIDNV.xy);
    imageStore(DDGI_GBUFFER, gid, vec4(gid / vec2(push.consts.width, push.consts.height), 1.0, 1.0));

    // /* Next, Compute ray origin and direction */
    // init_random(ivec2(gl_LaunchIDNV.xy), push.consts.frame, 0);
    // int max_path_depth = int(push.consts.parameter1);
    // const ivec2 pixel_coords = ivec2(gl_LaunchIDNV.xy);

    // // vec4 temp = imageLoad(gbuffers[SEED_ADDR], pixel_coords);
    // // ivec2 pixel_seed = ivec2(temp.xy);
    // // int frame_seed = int(temp.z);
    // // init_random(pixel_seed, frame_seed, 0);
    
    // // float rand = random();
    // // imageStore(gbuffers[RANDOM_ADDR], pixel_coords, vec4(rand));

    // /* Next, Compute ray origin and direction */
    // EntityStruct camera_entity = ebo.entities[push.consts.camera_id];
    // CameraStruct camera = cbo.cameras[camera_entity.camera_id];
    // TransformStruct camera_transform = tbo.transforms[camera_entity.transform_id];
    // int multiview_idx = 0; //push.consts.viewIndex;
    // mat4 projinv = camera.multiviews[multiview_idx].projinv;
    // mat4 viewinv = camera_transform.localToWorld * camera.multiviews[multiview_idx].viewinv;
    // vec2 pixel_center = vec2(pixel_coords.xy);// + vec2(random(), random()) * .5;
	// const vec2 in_uv = pixel_center/vec2(push.consts.width, push.consts.height);
	// vec2 d = in_uv * 2.0 - 1.0; d.y *= -1.0;
    // vec4 t = (projinv * vec4(d.x, d.y, 1, 1));
    // vec3 target = t.xyz / t.w;
    // vec3 origin = (viewinv * vec4(0,0,0,1)).xyz;
    // vec3 direction = (viewinv * vec4(target, 0)).xyz ;
    // direction = normalize(direction);

    // /* Trace a ray to compute primary visibility data */
    // vec3 world_position = vec3(INFINITY);
    // vec3 model_position = vec3(INFINITY);
    // vec3 world_normal = vec3(INFINITY);
    // vec3 albedo = vec3(0.0);
    // float metallic = 0.;
    // float roughness = 1.;
    // vec2 uv = vec2(0.0);
    // float dist = INFINITY;
    // int entity_id = -1;

    // int transparency_continues = 0;
    // int bounce = 0;
    // precise vec3 motion = vec3(0.0);
    // bool reset = true;
    // bool is_flat;
    // float curvature;

    // int mesh_id = -1; 
    // int tri_id = -1; 
    // vec2 barycentrics = vec2(0);

    // EntityStruct entity;
    // entity.initialized = 0;
    // entity.material_id = -1;
    // entity.transform_id = -1;
    // entity.light_id = -1;
    // MaterialStruct mat; LightStruct light;
    // do {
    //     bounce++;
    //     /* Trace a ray through the scene */
    //     payload.is_shadow_ray = false;
    //     payload.entity_id = -1;
    //     traceNV(topLevelAS, gl_RayFlagsNoneNV, 0xff, 0, 0, 0, origin, TMIN, direction, TMAX, 0);

    //     /* If we hit the sky... */
    //     if (payload.entity_id < 0  || payload.entity_id >= MAX_ENTITIES) {
    //         albedo = get_environment_color(direction);
    //         break;
    //     }
        
    //     unpack_entity_struct(payload.entity_id, entity);
    //     unpack_material_struct(payload.entity_id, entity, payload.uv, payload.m_p, mat);
    //     unpack_light_struct(payload.entity_id, entity, light);

    //     /* If the object is completely transparent, go through it  */
    //     if ((mat.base_color.a < EPSILON) && (transparency_continues < MAX_TRANSPARENCY_CONTINUES)) {
    //         transparency_continues++;
    //         origin = payload.w_p + EPSILON * direction;
    //         continue;
    //     }

    //     mesh_id = payload.mesh;
    //     tri_id = payload.tri;
    //     barycentrics = payload.barycentrics;

    //     /* If the object is a light, use its light color as albedo */
    //     // Not sure why, but this causes albedo to be black?
    //     if ((entity.light_id >= 0) && (entity.light_id < max_lights)) 
    //     {
    //         // albedo += vec3(1.0, 1.0, 1.0);//light.color.rgb;// * light.intensity;
    //     }

    //     albedo = mat.base_color.rgb;
    //     metallic = mat.metallic;
    //     roughness = mat.roughness;
    //     entity_id = payload.entity_id;
    //     world_position = payload.w_p;
    //     model_position = payload.m_p;
    //     world_normal = payload.w_n;
    //     dist = payload.distance;
    //     uv = payload.uv;
    //     // is_flat = payload.is_flat;
    //     curvature = payload.curvature;

    //     /* Compute motion vector for primary visibility */
    //     if (entity.initialized == 1) {
    //         reset = false;
    //         TransformStruct transform = tbo.transforms[entity.transform_id];
    //         vec4 w_p_prev = transform.localToWorldPrev * vec4(model_position, 1.0);

    //         vec4 v_p_curr = camera.multiviews[multiview_idx].viewproj * camera_transform.worldToLocal * vec4(world_position, 1.0);
    //         vec4 v_p_prev = camera.multiviews[multiview_idx].viewproj * camera_transform.worldToLocalPrev * w_p_prev;

    //         motion = (v_p_prev.xyz / v_p_prev.w) - (v_p_curr.xyz / v_p_curr.w);
    //     }
        
    //     break;
    // } while (transparency_continues <= MAX_TRANSPARENCY_CONTINUES);

    // // specular lobe axis and sharpness 
    // vec3 w_i = normalize(reflect(direction, world_normal));
    // float alpha = clamp(roughness * roughness, .0000, 1.);
    // // important that this is between 0 and 1
    // float specular_sharpness = (1.0 - alpha); 
    

    // /* Write to G Buffers */
    // // ID data
    // imageStore(gbuffers[ENTITY_MATERIAL_TRANSFORM_LIGHT_ADDR], ivec2(gl_LaunchIDNV.xy), vec4(entity_id, entity.material_id, entity.transform_id, entity.light_id));

    // // Position G Buffer
    // imageStore(gbuffers[POSITION_DEPTH_ADDR], ivec2(gl_LaunchIDNV.xy), vec4(world_position, dist));

    // // Normal G Buffer
    // imageStore(gbuffers[NORMAL_ADDR], ivec2(gl_LaunchIDNV.xy), vec4(world_normal, curvature));//(is_flat) ? 1.f : 0.f));

    // // UV
    // imageStore(gbuffers[UV_METALLIC_ROUGHESS_ADDR], ivec2(gl_LaunchIDNV.xy), vec4(uv.x, uv.y, metallic, roughness));

    // // Diffuse color
    // imageStore(gbuffers[DIFFUSE_COLOR_ADDR], ivec2(gl_LaunchIDNV.xy), vec4(albedo, 1.0));
    
    // // Glossy color
    // imageStore(gbuffers[GLOSSY_COLOR_ADDR], ivec2(gl_LaunchIDNV.xy), vec4(1.0, 1.0, 1.0, 1.0));

    // // Motion Vector G Buffer
    // imageStore(gbuffers[DIFFUSE_MOTION_ADDR], ivec2(gl_LaunchIDNV.xy), vec4(motion, (reset) ? 1.0 : 0.0));

    // // Specular lobe axis and sharpness
    // imageStore(gbuffers[LOBE_AXIS_SHARPNESS_ADDR], ivec2(gl_LaunchIDNV.xy), vec4(w_i, specular_sharpness));

    // // Mesh ID, Tri ID, and Barycentrics
    // imageStore(gbuffers[ENTITY_TRI_BARYCENTRIC_ADDR], ivec2(gl_LaunchIDNV.xy), vec4(barycentrics, entity_id, tri_id));

    

    // if (int(gl_LaunchIDNV.x * PATH_TRACE_TILE_SIZE) >= push.consts.width) return;
    // if (int(gl_LaunchIDNV.y * PATH_TRACE_TILE_SIZE) >= push.consts.height) return;
    
    // Seed (For path tracing, downsampled)
    // imageStore(gbuffers[SEED_ADDR], ivec2(gl_LaunchIDNV.xy), vec4(pixel_seed, frame_seed, 1.0));
}